use sakila;

#### Challenge - Joining on multiple tables ####
# Write SQL queries to perform the following tasks using the Sakila database:

# 1. List the number of films per category.
select * from sakila.category;
select * from sakila.film;

select c.category_id, c.name as cat_name, count(f.film_id) as film_num
from category c
join film_category fc 
on c.category_id = fc.category_id
join film f
on fc.film_id = f.film_id
group by c.category_id, c.name
order by film_num desc;

# 2. Retrieve the store ID, city, and country for each store.
select * from sakila.store;
select * from sakila.address;
select * from sakila.country;
select * from sakila.city;

select s.store_id, a.city_id, country.country
from store s
join address a
on s.address_id = a.address_id
join city
on a.city_id = city.city_id
join country
on city.country_id = country.country_id;

# 3. Calculate the total revenue generated by each store in dollars.
select * from sakila.payment;
select * from sakila.store;
select * from sakila.staff;

select s.store_id, s.manager_staff_id, sum(p.amount) as total_revenue
from store s
join staff s2 
on s.manager_staff_id = s2.staff_id 
join address a 
on s.address_id = a.address_id
join payment p 
on p.staff_id = s2.staff_id 
group by s.store_id, s.manager_staff_id;

# 4. Determine the average running time of films for each category.
select * from sakila.category;
select * from sakila.film;

select c.category_id, c.name AS category_name, avg(f.length) as avg_running_time
from category c
join film_category fc 
on c.category_id = fc.category_id
join film f 
on fc.film_id = f.film_id
group by c.category_id, c.name
order by avg_running_time asc;
